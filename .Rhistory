petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 100 # number of iterations in traditional alghoritm
population_members <- 5       # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 4  # number of DEoptim iterations ( minimal 4)
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 100 # number of iterations in traditional alghoritm
population_members <- 5       # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 4  # number of DEoptim iterations ( minimal 4)
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
# This function converts the total distance of points from the mean in each group
quality <- function(data, numberOfCentroids){                 # Grouping quality assessment function
result <- 0
n <- 1
repeat{
if(n > numberOfCentroids)
break
else{
if(ncol(data[[n]])==5){ data[[n]] <- data[[n]][,-5] }   # No numeric data in 5th column
center <- colMeans(data[[n]])
if(!identical(square_error(center, data[[n]]), numeric(0))){    # if table is empty , dont change result
result <- result + square_error(center, data[[n]])
}
else{print("Quality_check: one of tables is empty")}      # if you add a number and numeric(0), you will get numeric(0) ( not desired)
n<-n+1
}
}
return(result)
}
# Square error <- distant points have a worse impact on the whole
square_error <- function(aver,data){
wynik <- 0
for(i in 1:nrow(data)){
wynik <- wynik +  ( (aver[1]-data[i,1])^2+(aver[2]-data[i,2])^2+(aver[3]-data[i,3])^2+(aver[4]-data[i,4])^2 )
}
return(wynik)
}
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 100 # number of iterations in traditional alghoritm
population_members <- 5       # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 4  # number of DEoptim iterations ( minimal 4)
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
# This function converts the total distance of points from the mean in each group
quality <- function(data, numberOfCentroids){                 # Grouping quality assessment function
result <- 0
n <- 1
repeat{
if(n > numberOfCentroids)
break
else{
if(ncol(data[[n]])==5){ data[[n]] <- data[[n]][,-5] }   # No numeric data in 5th column
center <- colMeans(data[[n]])
if(!identical(square_error(center, data[[n]]), numeric(0))){    # if table is empty , dont change result
result <- result + square_error(center, data[[n]])
}
else{print("Quality_check: one of tables is empty")}      # if you add a number and numeric(0), you will get numeric(0) ( not desired)
n<-n+1
}
}
return(result)
}
# Square error <- distant points have a worse impact on the whole
square_error <- function(aver,data){
wynik <- 0
for(i in 1:nrow(data)){
wynik <- wynik +  ( (aver[1]-data[i,1])^2+(aver[2]-data[i,2])^2+(aver[3]-data[i,3])^2+(aver[4]-data[i,4])^2 )
}
return(wynik)
}
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 100 # number of iterations in traditional alghoritm
population_members <- 5       # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 4  # number of DEoptim iterations ( minimal 4)
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of the examined versions of algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data
show_accuracy(thebest)
thebest
# Author : Maciej Karcz
# Date : 02.06.2018r
source("generate.R")
source("grouping.R")
source("quality_check.R")
# Testing the most-used functions in the program
# distance4D from grouping.R
x1<- c(1,1,1,4)
x2<- c(1,1,1,3)
stopifnot(distance4D(x1,x2)==1)
# make_groups form grouping.R
# With this data and centroids we should get in return 3 matrixes 3x3
dane <- matrix(c(1,1,2,1, 1,2,2,1, 2,3,2,1,
5,6,7,6, 7,8,7,8, 7,6,8,7,
12,19,16,15, 13,14,11,20, 15,16,20,10),byrow = TRUE, nrow = 9, ncol = 4)
centroidy <- c(1,1,1,1,5,5,5,5,12,12,12,12)
l_centroidow <- 3
grupy <- make_groups(dane,centroidy,l_centroidow)
stopifnot(nrow(grupy[[1]])==3,nrow(grupy[[2]])==3,nrow(grupy[[3]])==3)
# generate from generate.R
# Output vector consists of centroids in one vector (1 row). Each centroid have consists of 4 numbers
liczba_losowych <- 5
losowe <- generate(liczba_losowych, 1,2, 3,4, 1,2, 3,4 )
stopifnot(length(losowe)==liczba_losowych*4)
# square_error from quality_check.R
# (6-4)^2 + (2-4)^2 = 8
x3 <- matrix(c(1,1,1,6,1,1,1,2),byrow = TRUE, nrow =2, ncol = 4)
x4<- c(1,1,1,4)
stopifnot(square_error(x4,x3)==8)
# quality from quality_check.R
# in the beginning, the function counts colMeans and then calls square_error
# output should be 4
m1 <- data.frame(1,1,1,5,"class1")
names(m1) <- c("V1","V2","V3","V4","V5")
m2 <- data.frame(1,1,1,3,"class1")
names(m2) <- c("V1","V2","V3","V4","V5")
m3 <- data.frame(1,1,1,1,"class2")
names(m3) <- c("V1","V2","V3","V4","V5")
m1 <- rbind(m1,m2) # 1 1 1 5 class1
# 1 1 1 3 class1 -> mean : 1 1 1 4 ; from square_error we will get = 2
m2 <- rbind(m2,m3) # 1 1 1 3 class1                                                       -> sum = 2 + 2 =4
# 1 1 1 1 class2 -> mean : 1 1 1 2 ; from square_error we will get = 2
dane2 <- list(m1,m2)
liczba_centroidow <- 2
stopifnot(quality(dane2,liczba_centroidow)==4)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 10      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 25  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 10      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 24  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data ( where 5th column is not specified)
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 10      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 50  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 10      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 50  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data ( where 5th column is not specified)
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 24      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 10  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data ( where 5th column is not specified)
show_accuracy(thebest)
# Author : Maciej Karcz
# Date : 02.06.2018r
library(DEoptim)
source("Kmeans_traditional.R")
source("Kmeans_evolutionary.R")
source("show_accuracy.R")
# minmal and maximal values taken from UCI side
sepal_lmin <- 4.3 # minimal length in cm
sepal_lmax <- 7.9 # maximal length in cm
sepal_wmin <- 2.0 # minimal width in cm
sepal_wmax <- 4.4 # maximal width in cm
petal_lmin <- 1.0
petal_lmax <- 6.9
petal_wmin <- 0.1
petal_wmax <- 2.5
K <- 3                        # number of centroids (minimal 3) <- this is not an experimental object,
# (in preliminary documentation we decided to use only 3 centroids)
# but the program also works for a different number of centroids
C <- list()                   # list of grouped elements
traditional_iterations <- 200 # number of iterations in traditional alghoritm
population_members <- 50      # number of population members in DEoptim (minimal 5)
evolutionary_iterations <- 10  # number of DEoptim iterations ( minimal 4)
# Warning -> other data sets must have 4 numbers in each row
IrisFlowers <- read.table("IrisFlowers.txt", header=FALSE, sep=",", quote="") # data for grouping
# Traditional version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
# Kmeans_traditional(K,sepal_lmin,sepal_lmax,
#                      sepal_wmin,sepal_wmax,
#                      petal_lmin,petal_lmax,
#                      petal_wmin,petal_wmax,
#                      IrisFlowers,
#                      traditional_iterations)
# Evolutionary version of algorithm. Due to the high execution time
# it is recommended to select one of 2 versions of the algorithm
thebest <- Kmeans_evolutionary(K, sepal_lmin,sepal_lmax,
sepal_wmin,sepal_wmax,
petal_lmin,petal_lmax,
petal_wmin,petal_wmax,
IrisFlowers,
population_members,
evolutionary_iterations)
# do not use show_accuracy with another set of data ( where 5th column is not specified)
show_accuracy(thebest)
